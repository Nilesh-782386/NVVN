import { query } from '../db.js';
import { v4 as uuidv4 } from 'uuid';

class ChatbotService {
  constructor() {
    this.botName = 'CareGuide';
    this.defaultLanguage = 'en';
    this.maxRecommendations = 3;
  }

  // Generate unique session ID
  generateSessionId() {
    return uuidv4();
  }

  // Create or get user session
  async createSession(userType = 'guest', userId = null, currentPage = null, language = 'en') {
    try {
      const sessionId = this.generateSessionId();
      
      await query(`
        INSERT INTO chatbot_sessions (session_id, user_type, user_id, current_page, language)
        VALUES (?, ?, ?, ?, ?)
      `, [sessionId, userType, userId, currentPage, language]);

      return sessionId;
    } catch (error) {
      console.error('Error creating chatbot session:', error);
      return null;
    }
  }

  // Get existing session
  async getSession(sessionId) {
    try {
      const result = await query(`
        SELECT * FROM chatbot_sessions WHERE session_id = ? AND is_active = TRUE
      `, [sessionId]);

      return result[0] && result[0][0] ? result[0][0] : null;
    } catch (error) {
      console.error('Error getting chatbot session:', error);
      return null;
    }
  }

  // Update session activity
  async updateSessionActivity(sessionId) {
    try {
      await query(`
        UPDATE chatbot_sessions SET last_activity = CURRENT_TIMESTAMP WHERE session_id = ?
      `, [sessionId]);
    } catch (error) {
      console.error('Error updating session activity:', error);
    }
  }

  // Simple NLP for question matching
  matchQuestion(userMessage, faqQuestions, language = 'en') {
    const message = userMessage.toLowerCase();
    const questionField = language === 'hi' ? 'question_hi' : 'question_en';
    
    // Direct match
    for (const faq of faqQuestions) {
      const question = (faq[questionField] || '').toLowerCase();
      if (question.includes(message) || message.includes(question)) {
        return { faq, score: 1.0, type: 'direct' };
      }
    }

    // Keyword matching
    const keywordMatches = [];
    for (const faq of faqQuestions) {
      const keywords = (faq.keywords || '').toLowerCase().split(',').map(k => k.trim());
      let matchCount = 0;
      
      for (const keyword of keywords) {
        if (message.includes(keyword)) {
          matchCount++;
        }
      }
      
      if (matchCount > 0) {
        const score = matchCount / keywords.length;
        keywordMatches.push({ faq, score, type: 'keyword' });
      }
    }

    // Return best match
    if (keywordMatches.length > 0) {
      keywordMatches.sort((a, b) => b.score - a.score);
      return keywordMatches[0];
    }

    return null;
  }

  // Process user message and generate response
  async processMessage(sessionId, userMessage, userContext = {}) {
    try {
      const session = await this.getSession(sessionId);
      if (!session) {
        return this.getDefaultResponse('en');
      }

      const language = session.language || 'en';
      const userType = session.user_type || 'guest';

      // Update session activity
      await this.updateSessionActivity(sessionId);

      // Get FAQ data
      const faqResult = await query(`
        SELECT * FROM chatbot_faq WHERE is_active = TRUE ORDER BY priority DESC
      `);

      const faqData = faqResult[0] || [];

      // Try to match with FAQ
      const match = this.matchQuestion(userMessage, faqData, language);
      
      let response = null;
      let responseType = 'general';

      if (match && match.score > 0.3) {
        // FAQ match found
        const answerField = language === 'hi' ? 'answer_hi' : 'answer_en';
        response = match.faq[answerField] || match.faq.answer_en;
        responseType = 'faq';
      } else {
        // Check for specific intents
        const intent = this.detectIntent(userMessage, language);
        
        switch (intent.type) {
          case 'ngo_recommendation':
            response = await this.getNGORecommendations(userContext, language);
            responseType = 'recommendation';
            break;
          case 'donation_guidance':
            response = this.getDonationGuidance(intent.step, language);
            responseType = 'guidance';
            break;
          case 'status_tracking':
            response = this.getStatusTrackingGuidance(language);
            responseType = 'guidance';
            break;
          case 'urgent_needs':
            response = await this.getUrgentNeeds(userContext.city, language);
            responseType = 'notification';
            break;
          default:
            response = this.getDefaultResponse(language);
        }
      }

      // Save conversation
      await this.saveConversation(sessionId, userMessage, response, responseType);

      return {
        response: response,
        type: responseType,
        sessionId: sessionId,
        language: language,
        botName: this.botName
      };

    } catch (error) {
      console.error('Error processing chatbot message:', error);
      return {
        response: 'I apologize, but I encountered an error. Please try again or contact support.',
        type: 'error',
        sessionId: sessionId,
        language: 'en',
        botName: this.botName
      };
    }
  }

  // Detect user intent from message
  detectIntent(message, language = 'en') {
    const msg = message.toLowerCase();
    
    // NGO recommendation intent
    if (msg.includes('recommend') || msg.includes('suggest') || msg.includes('which ngo') || 
        msg.includes('best ngo') || msg.includes('suitable ngo')) {
      return { type: 'ngo_recommendation' };
    }

    // Donation guidance intent
    if (msg.includes('how to donate') || msg.includes('donation process') || 
        msg.includes('step by step') || msg.includes('guide')) {
      return { type: 'donation_guidance', step: 'overview' };
    }

    // Status tracking intent
    if (msg.includes('track') || msg.includes('status') || msg.includes('where is') || 
        msg.includes('progress') || msg.includes('update')) {
      return { type: 'status_tracking' };
    }

    // Urgent needs intent
    if (msg.includes('urgent') || msg.includes('emergency') || msg.includes('needed') || 
        msg.includes('critical') || msg.includes('immediate')) {
      return { type: 'urgent_needs' };
    }

    return { type: 'general' };
  }

  // Get NGO recommendations based on context
  async getNGORecommendations(context, language = 'en') {
    try {
      const { city, donationType } = context;
      
      if (!city || !donationType) {
        return language === 'hi' 
          ? 'рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╢рд╣рд░ рдФрд░ рджрд╛рди рдХрд╛ рдкреНрд░рдХрд╛рд░ рдмрддрд╛рдПрдВ рддрд╛рдХрд┐ рдореИрдВ рдЖрдкрдХреЛ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреЗ рдПрдирдЬреАрдУ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХрд░ рд╕рдХреВрдВред'
          : 'Please provide your city and donation type so I can recommend the best NGOs for you.';
      }

      const result = await query(`
        SELECT nr.*, n.ngo_name, n.primary_phone, n.email
        FROM ngo_recommendations nr
        JOIN ngo_register n ON nr.ngo_id = n.id
        WHERE nr.user_city = ? AND nr.donation_type = ? AND nr.is_active = TRUE
        ORDER BY nr.match_percentage DESC
        LIMIT ?
      `, [city, donationType, parseInt(this.maxRecommendations)]);

      const recommendations = result[0] || [];

      if (recommendations.length === 0) {
        return language === 'hi'
          ? `рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, ${city} рдореЗрдВ ${donationType} рдХреЗ рд▓рд┐рдП рдХреЛрдИ рдПрдирдЬреАрдУ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред`
          : `Sorry, no NGO recommendations available for ${donationType} in ${city}.`;
      }

      let response = language === 'hi' 
        ? `рдЖрдкрдХреЗ ${donationType} рджрд╛рди рдХреЗ рд▓рд┐рдП рд╢реАрд░реНрд╖ ${recommendations.length} рдЕрдиреБрд╢рдВрд╕рд┐рдд рдПрдирдЬреАрдУ:\n\n`
        : `Top ${recommendations.length} Recommended NGOs for your ${donationType} donation:\n\n`;

      recommendations.forEach((rec, index) => {
        const matchPercent = Math.round(rec.match_percentage);
        const speed = rec.approval_speed_hours ? `${rec.approval_speed_hours}h` : 'N/A';
        const distance = rec.distance_km ? `${rec.distance_km}km` : 'N/A';

        response += `${index + 1}. **${rec.ngo_name}** (${matchPercent}% match)\n`;
        response += `   ЁЯУН Distance: ${distance}\n`;
        response += `   тЪб Approval Speed: ${speed}\n`;
        response += `   ЁЯУЮ Contact: ${rec.primary_phone}\n`;
        if (rec.current_needs) {
          response += `   ЁЯОп Current Needs: ${rec.current_needs}\n`;
        }
        response += `   ЁЯТб Reason: ${rec.recommendation_reason}\n\n`;
      });

      return response;

    } catch (error) {
      console.error('Error getting NGO recommendations:', error);
      return language === 'hi'
        ? 'рдПрдирдЬреАрдУ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред'
        : 'Error getting NGO recommendations. Please try again later.';
    }
  }

  // Get donation process guidance
  getDonationGuidance(step, language = 'en') {
    const guidance = {
      overview: language === 'hi' 
        ? `рджрд╛рди рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХреЗ рдЪрд░рдг:\n\n1я╕ПтГг **рдЖрдЗрдЯрдо рдЪреБрдиреЗрдВ** - рдЕрдкрдиреЗ рджрд╛рди рдХреА рд╡рд╕реНрддреБрдПрдВ рдЪреБрдиреЗрдВ\n2я╕ПтГг **рд╡рд┐рд╡рд░рдг рднрд░реЗрдВ** - рдорд╛рддреНрд░рд╛, рд╡рд┐рд╡рд░рдг рдФрд░ рдкрддрд╛ рдЬреЛрдбрд╝реЗрдВ\n3я╕ПтГг **рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ** - рд╕реНрдкрд╖реНрдЯ рддрд╕реНрд╡реАрд░реЗрдВ рд▓реЗрдВ\n4я╕ПтГг **рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ** - рдПрдирдЬреАрдУ рдЕрдиреБрдореЛрджрди рдХреЗ рд▓рд┐рдП рднреЗрдЬреЗрдВ\n5я╕ПтГг **рдЯреНрд░реИрдХ рдХрд░реЗрдВ** - рдЕрдкрдиреЗ рдбреИрд╢рдмреЛрд░реНрдб рдореЗрдВ рдкреНрд░рдЧрддрд┐ рджреЗрдЦреЗрдВ\n\nЁЯТб **рдкреНрд░реЛ рдЯрд┐рдк:** рд╕реНрдкрд╖реНрдЯ рдлреЛрдЯреЛ рд▓реЗрдВ рддрд╛рдХрд┐ рддреЗрдЬреА рд╕реЗ рдЕрдиреБрдореЛрджрди рдорд┐рд▓реЗ!`
        : `Donation Process Steps:\n\n1я╕ПтГг **Select Items** - Choose your donation items\n2я╕ПтГг **Add Details** - Add quantity, description, and address\n3я╕ПтГг **Upload Photos** - Take clear pictures\n4я╕ПтГг **Submit** - Send for NGO approval\n5я╕ПтГг **Track** - Monitor progress in your dashboard\n\nЁЯТб **Pro Tip:** Take clear photos for faster approval!`,
      
      items: language === 'hi'
        ? `рджрд╛рди рдЖрдЗрдЯрдо рдЪреБрдирдиреЗ рдХреЗ рд▓рд┐рдП:\n\nтАв **рдЦрд╛рджреНрдп рдкрджрд╛рд░реНрде:** рдЪрд╛рд╡рд▓, рдЧреЗрд╣реВрдВ, рджрд╛рд▓реЗрдВ, рддреЗрд▓\nтАв **рдХрдкрдбрд╝реЗ:** рд╕рд░реНрджрд┐рдпреЛрдВ рдХреЗ рдХрдкрдбрд╝реЗ, рдмрдЪреНрдЪреЛрдВ рдХреЗ рдХрдкрдбрд╝реЗ\nтАв **рд╕реНрдХреВрд▓ рд╕рд╛рдордЧреНрд░реА:** рдХрд┐рддрд╛рдмреЗрдВ, рдХрд▓рдо, рдмреИрдЧ\nтАв **рдЦрд┐рд▓реМрдиреЗ:** рд╢реИрдХреНрд╖рд┐рдХ рдЦрд┐рд▓реМрдиреЗ, рдЦреЗрд▓ рд╕рд╛рдордЧреНрд░реА\n\nЁЯОп **рд╕реБрдЭрд╛рд╡:** рдЕрдкрдиреЗ рд╢рд╣рд░ рдХреА рд╡рд░реНрддрдорд╛рди рдЬрд░реВрд░рддреЛрдВ рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВ!`
        : `For selecting donation items:\n\nтАв **Food Items:** Rice, wheat, pulses, oil\nтАв **Clothes:** Winter wear, children's clothes\nтАв **School Supplies:** Books, pens, bags\nтАв **Toys:** Educational toys, sports equipment\n\nЁЯОп **Suggestion:** Check current needs in your city!`,
      
      photos: language === 'hi'
        ? `рдЕрдЪреНрдЫреА рдлреЛрдЯреЛ рд▓реЗрдиреЗ рдХреЗ рд▓рд┐рдП:\n\nЁЯУ╕ **рд╕реБрдЭрд╛рд╡:**\nтАв рдЕрдЪреНрдЫреА рд░реЛрд╢рдиреА рдореЗрдВ рд▓реЗрдВ\nтАв рд╕рднреА рдЖрдЗрдЯрдо рджрд┐рдЦрд╛рдПрдВ\nтАв рд╕реНрдкрд╖реНрдЯ рдФрд░ рдлреЛрдХрд╕реНрдб рд░рдЦреЗрдВ\nтАв рдЕрд▓рдЧ-рдЕрд▓рдЧ рдХреЛрдг рд╕реЗ рд▓реЗрдВ\nтАв рд▓реЗрдмрд▓ рдФрд░ рдмреНрд░рд╛рдВрдб рджрд┐рдЦрд╛рдПрдВ\n\nтЪб **рдлрд╛рдпрджрд╛:** рд╕реНрдкрд╖реНрдЯ рдлреЛрдЯреЛ рд╕реЗ рддреЗрдЬреА рд╕реЗ рдЕрдиреБрдореЛрджрди рдорд┐рд▓рддрд╛ рд╣реИ!`
        : `For taking good photos:\n\nЁЯУ╕ **Tips:**\nтАв Take in good lighting\nтАв Show all items clearly\nтАв Keep focused and sharp\nтАв Take from different angles\nтАв Show labels and brands\n\nтЪб **Benefit:** Clear photos get faster approval!`
    };

    return guidance[step] || guidance.overview;
  }

  // Get status tracking guidance
  getStatusTrackingGuidance(language = 'en') {
    return language === 'hi'
      ? `рджрд╛рди рд╕реНрдерд┐рддрд┐ рдЯреНрд░реИрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП:\n\n1я╕ПтГг **рд▓реЙрдЧ рдЗрди рдХрд░реЗрдВ** - рдЕрдкрдиреЗ рджрд╛рдирдХрд░реНрддрд╛ рдЦрд╛рддреЗ рдореЗрдВ\n2я╕ПтГг **рджрд╛рди рдЗрддрд┐рд╣рд╛рд╕** - рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ\n3я╕ПтГг **рд░рд┐рдпрд▓-рдЯрд╛рдЗрдо рдЕрдкрдбреЗрдЯ** - рд╣рд░ 30 рд╕реЗрдХрдВрдб рдореЗрдВ рдЕрдкрдбреЗрдЯ\n4я╕ПтГг **рд╕реНрдерд┐рддрд┐ рджреЗрдЦреЗрдВ:**\n   тАв тП│ рдкреЗрдВрдбрд┐рдВрдЧ - рдПрдирдЬреАрдУ рдЕрдиреБрдореЛрджрди рдХреА рдкреНрд░рддреАрдХреНрд╖рд╛\n   тАв тЬЕ рдЕрдиреБрдореЛрджрд┐рдд - рд╕реНрд╡рдпрдВрд╕реЗрд╡рдХ рдЕрд╕рд╛рдЗрдирдореЗрдВрдЯ\n   тАв ЁЯЪЪ рдкрд┐рдХрдЕрдк - рд╕реНрд╡рдпрдВрд╕реЗрд╡рдХ рджреНрд╡рд╛рд░рд╛ рдЙрдард╛рдпрд╛ рдЧрдпрд╛\n   тАв ЁЯУж рдбрд┐рд▓реАрд╡рд░ - рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкрд╣реБрдВрдЪрд╛рдпрд╛ рдЧрдпрд╛\n\nЁЯТб **рд╕реВрдЪрдирд╛:** рдЖрдкрдХреЛ рд╣рд░ рдЪрд░рдг рдкрд░ рд╕реВрдЪрдирд╛рдПрдВ рдорд┐рд▓реЗрдВрдЧреА!`
      : `To track donation status:\n\n1я╕ПтГг **Login** - To your donor account\n2я╕ПтГг **Donation History** - Click on dashboard\n3я╕ПтГг **Real-time Updates** - Updates every 30 seconds\n4я╕ПтГг **Status Types:**\n   тАв тП│ Pending - Waiting for NGO approval\n   тАв тЬЕ Approved - Volunteer assignment\n   тАв ЁЯЪЪ Picked Up - Collected by volunteer\n   тАв ЁЯУж Delivered - Successfully delivered\n\nЁЯТб **Note:** You'll get notifications at every step!`;
  }

  // Get urgent needs in city
  async getUrgentNeeds(city, language = 'en') {
    try {
      const result = await query(`
        SELECT * FROM chatbot_notifications 
        WHERE target_audience IN ('donors', 'all') 
        AND (target_city = ? OR target_city IS NULL)
        AND is_active = TRUE 
        AND (expires_at IS NULL OR expires_at > NOW())
        ORDER BY 
          CASE priority 
            WHEN 'urgent' THEN 1 
            WHEN 'high' THEN 2 
            WHEN 'medium' THEN 3 
            ELSE 4 
          END,
          created_at DESC
        LIMIT 3
      `, [city]);

      const notifications = result[0] || [];

      if (notifications.length === 0) {
        return language === 'hi'
          ? 'рд╡рд░реНрддрдорд╛рди рдореЗрдВ рдХреЛрдИ рддрддреНрдХрд╛рд▓ рдЬрд░реВрд░рдд рдирд╣реАрдВ рд╣реИред рдЖрдк рдЕрдкрдирд╛ рджрд╛рди рдЬрд╛рд░реА рд░рдЦ рд╕рдХрддреЗ рд╣реИрдВ!'
          : 'No urgent needs at the moment. You can continue with your donation!';
      }

      let response = language === 'hi' 
        ? `ЁЯЪи **рддрддреНрдХрд╛рд▓ рдЬрд░реВрд░рддреЗрдВ** (${city}):\n\n`
        : `ЁЯЪи **Urgent Needs** (${city}):\n\n`;

      notifications.forEach((notif, index) => {
        const titleField = language === 'hi' ? 'title_hi' : 'title_en';
        const messageField = language === 'hi' ? 'message_hi' : 'message_en';
        
        response += `${index + 1}. **${notif[titleField] || notif.title_en}**\n`;
        response += `   ${notif[messageField] || notif.message_en}\n\n`;
      });

      return response;

    } catch (error) {
      console.error('Error getting urgent needs:', error);
      return language === 'hi'
        ? 'рддрддреНрдХрд╛рд▓ рдЬрд░реВрд░рддреЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред'
        : 'Error getting urgent needs.';
    }
  }

  // Get default response
  getDefaultResponse(language = 'en') {
    const responses = {
      en: `Hello! I'm ${this.botName}, your donation assistant. I can help you with:\n\nтАв ЁЯУЛ Donation process guidance\nтАв ЁЯПв NGO recommendations\nтАв ЁЯУК Status tracking\nтАв тЭУ Common questions\nтАв ЁЯЪи Urgent needs in your area\n\nHow can I assist you today?`,
      hi: `рдирдорд╕реНрддреЗ! рдореИрдВ ${this.botName} рд╣реВрдВ, рдЖрдкрдХрд╛ рджрд╛рди рд╕рд╣рд╛рдпрдХред рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:\n\nтАв ЁЯУЛ рджрд╛рди рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рди\nтАв ЁЯПв рдПрдирдЬреАрдУ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ\nтАв ЁЯУК рд╕реНрдерд┐рддрд┐ рдЯреНрд░реИрдХрд┐рдВрдЧ\nтАв тЭУ рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рд╢реНрди\nтАв ЁЯЪи рдЖрдкрдХреЗ рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рддрддреНрдХрд╛рд▓ рдЬрд░реВрд░рддреЗрдВ\n\nрдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?`
    };

    return responses[language] || responses.en;
  }

  // Save conversation to database
  async saveConversation(sessionId, userMessage, botResponse, responseType) {
    try {
      await query(`
        INSERT INTO chatbot_conversations (session_id, user_message, bot_response, response_type)
        VALUES (?, ?, ?, ?)
      `, [sessionId, userMessage, botResponse, responseType]);
    } catch (error) {
      console.error('Error saving conversation:', error);
    }
  }

  // Get quick suggestions based on user type and page
  async getQuickSuggestions(userType, currentPage, language = 'en') {
    const suggestions = {
      donor: {
        home: language === 'hi' 
          ? ['рджрд╛рди рдХреИрд╕реЗ рдХрд░реЗрдВ?', 'рдореЗрд░реЗ рд╢рд╣рд░ рдореЗрдВ рдХреНрдпрд╛ рдЬрд░реВрд░рдд рд╣реИ?', 'рджрд╛рди рд╕реНрдерд┐рддрд┐ рдХреИрд╕реЗ рдЯреНрд░реИрдХ рдХрд░реЗрдВ?']
          : ['How to donate?', 'What is needed in my city?', 'How to track donation status?'],
        donate: language === 'hi'
          ? ['рдХреМрди рд╕рд╛ рдПрдирдЬреАрдУ рд╕реБрдЭрд╛рдПрдВ?', 'рдлреЛрдЯреЛ рдХреИрд╕реЗ рд▓реЗрдВ?', 'рдХреНрдпрд╛ рдкреИрдХ рдХрд░рдирд╛ рд╣реИ?']
          : ['Which NGO to suggest?', 'How to take photos?', 'What to pack?'],
        dashboard: language === 'hi'
          ? ['рдореЗрд░рд╛ рджрд╛рди рдХрд╣рд╛рдВ рд╣реИ?', 'рдХрдм рдорд┐рд▓реЗрдЧрд╛?', 'рд╕реНрд╡рдпрдВрд╕реЗрд╡рдХ рдХреМрди рд╣реИ?']
          : ['Where is my donation?', 'When will it arrive?', 'Who is the volunteer?']
      },
      ngo: {
        dashboard: language === 'hi'
          ? ['рджреИрдирд┐рдХ рд╕реАрдорд╛ рдХреНрдпрд╛ рд╣реИ?', 'рдХреИрд╕реЗ рдЕрдиреБрдореЛрджрди рдХрд░реЗрдВ?', 'рд╕реНрд╡рдпрдВрд╕реЗрд╡рдХ рдХреИрд╕реЗ рдЕрд╕рд╛рдЗрди рдХрд░реЗрдВ?']
          : ['What is daily limit?', 'How to approve?', 'How to assign volunteer?']
      },
      volunteer: {
        dashboard: language === 'hi'
          ? ['рдХреМрди рд╕рд╛ рджрд╛рди рд▓реЗрдВ?', 'рдХреИрд╕реЗ рдкрд┐рдХрдЕрдк рдХрд░реЗрдВ?', 'рдкреНрд░реВрдл рдХреИрд╕реЗ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ?']
          : ['Which donation to take?', 'How to pickup?', 'How to upload proof?']
      }
    };

    return suggestions[userType]?.[currentPage] || suggestions.donor.home;
  }

  // Get contextual tips based on current page
  getContextualTips(currentPage, language = 'en') {
    const tips = {
      donate: language === 'hi'
        ? 'ЁЯТб **рдкреНрд░реЛ рдЯрд┐рдк:** рд╕реНрдкрд╖реНрдЯ рдлреЛрдЯреЛ рд▓реЗрдВ рдФрд░ рд╕рд╣реА рдорд╛рддреНрд░рд╛ рджрд░реНрдЬ рдХрд░реЗрдВ рддрд╛рдХрд┐ рддреЗрдЬреА рд╕реЗ рдЕрдиреБрдореЛрджрди рдорд┐рд▓реЗ!'
        : 'ЁЯТб **Pro Tip:** Take clear photos and enter correct quantities for faster approval!',
      dashboard: language === 'hi'
        ? 'ЁЯТб **рдкреНрд░реЛ рдЯрд┐рдк:** рдЖрдкрдХрд╛ рджрд╛рди рд╣рд░ 30 рд╕реЗрдХрдВрдб рдореЗрдВ рдЕрдкрдбреЗрдЯ рд╣реЛрддрд╛ рд╣реИред рдкреЗрдЬ рд░рд┐рдлреНрд░реЗрд╢ рдХрд░рдиреЗ рдХреА рдЬрд░реВрд░рдд рдирд╣реАрдВ!'
        : 'ЁЯТб **Pro Tip:** Your donation updates every 30 seconds. No need to refresh the page!',
      history: language === 'hi'
        ? 'ЁЯТб **рдкреНрд░реЛ рдЯрд┐рдк:** рдбрд┐рд▓реАрд╡рд░реА рдкреНрд░реВрдл рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП "рдкреНрд░реВрдл" рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ!'
        : 'ЁЯТб **Pro Tip:** Click the "Proof" button to view delivery proof!'
    };

    return tips[currentPage] || '';
  }
}

export default new ChatbotService();
